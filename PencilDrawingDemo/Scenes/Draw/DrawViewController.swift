//
//  DrawViewController.swift
//  PencilDrawingDemo
//
//  Created by Konstantin Stolyarenko on 11.09.2023.
//  Copyright Â© 2023 SKS. All rights reserved.
//
//  This file was generated by the SKS Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import PencilKit
import PhotosUI
import UIKit

// MARK: - DrawDisplayLogic Protocol

protocol DrawDisplayLogic: AnyObject {}

// MARK: - DrawViewController

class DrawViewController: UIViewController {

    // MARK: - Outlets

    @IBOutlet private var saveBarButtonItem: UIBarButtonItem!
    @IBOutlet private var inputDeviceBarButtonItem: UIBarButtonItem!
    @IBOutlet private var undoBarButtonItem: UIBarButtonItem!
    @IBOutlet private var redoBarButtonItem: UIBarButtonItem!
    @IBOutlet private var toolPickerBarButtonItem: UIBarButtonItem!
    @IBOutlet private var canvasView: PKCanvasView!

    // MARK: - Private Properties

    private var interactor: DrawBusinessLogic?
    private var router: (DrawRoutingLogic & DrawDataPassing)?

    private var drawing = PKDrawing()
    private let toolPicker = PKToolPicker()

    private var isPencilOnly = false {
        didSet {
            canvasView.drawingPolicy = isPencilOnly ? .pencilOnly : .anyInput
            inputDeviceBarButtonItem.image = isPencilOnly ? UIImage(systemName: "pencil") : UIImage(systemName: "hand.draw")
        }
    }

    private var isToolPickerActive = false {
        didSet {
            _ = isToolPickerActive ? canvasView.becomeFirstResponder() : canvasView.resignFirstResponder()
            let toolImage = isToolPickerActive ? UIImage(systemName: "pencil.circle.fill") : UIImage(systemName: "pencil.circle")
            toolPickerBarButtonItem.image = toolImage
        }
    }

    // MARK: - Init

    class func instantiate() -> DrawViewController {
        let name = "\(DrawViewController.self)"
        let storyboard = UIStoryboard(name: name, bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: name) as! DrawViewController
        vc.setup()
        return vc
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = DrawInteractor()
        let presenter = DrawPresenter()
        let router = DrawRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - View Lifecycle Properties

    override var prefersHomeIndicatorAutoHidden: Bool {
        return true
    }

    // MARK: - View Lifecycle Methods

    override func viewDidLoad() {
        super.viewDidLoad()

        setupView()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

        updateContentSizeForDrawing()
    }

    // MARK: - Actions

    @IBAction private func inputDeviceButtonTapped(_ sender: Any) {
        isPencilOnly.toggle()
    }

    @IBAction private func undoButtonTapped(_ sender: Any) {
        canvasView.undoManager?.undo()
    }

    @IBAction private func redoButtonTapped(_ sender: Any) {
        canvasView.undoManager?.redo()
    }

    @IBAction private func toolPickerButtonTapped(_ sender: Any) {
        isToolPickerActive.toggle()
    }

    @IBAction private func saveButtonTapped(_ sender: Any) {
        saveImage()
    }

    // MARK: - Private Methods

    private func setupView() {
        title = Const.Draw.drawTitle
        view.backgroundColor = .systemGray6

        isPencilOnly = false
        isToolPickerActive = false

        undoBarButtonItem.image = UIImage(systemName: "arrow.uturn.backward")
        redoBarButtonItem.image = UIImage(systemName: "arrow.uturn.forward")

        setupToolPicker()
        setupCanvas()
    }

    private func setupCanvas() {
        canvasView.delegate = self
        canvasView.drawing = drawing
        canvasView.alwaysBounceVertical = true
    }

    private func setupToolPicker() {
        toolPicker.setVisible(true, forFirstResponder: canvasView)
        toolPicker.addObserver(canvasView)
    }

    private func saveImage() {
        guard let image = renderImage() else { return }
        PHPhotoLibrary.shared().performChanges {
            PHAssetChangeRequest.creationRequestForAsset(from: image)
        }
    }

    private func renderImage() -> UIImage? {
        UIGraphicsBeginImageContextWithOptions(canvasView.bounds.size, false, UIScreen.main.scale)
        canvasView.drawHierarchy(in: canvasView.bounds, afterScreenUpdates: true)
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return image
    }

    func updateContentSizeForDrawing() {
        let canvasScale = canvasView.bounds.width / Const.Draw.maxCanvasWidth
        canvasView.maximumZoomScale = Const.Draw.maxZoomScale
        canvasView.minimumZoomScale = canvasScale
        canvasView.zoomScale = canvasScale

        let contentHeight: CGFloat
        if !canvasView.drawing.bounds.isNull {
            let extendedHeight = (canvasView.drawing.bounds.maxY) * canvasView.zoomScale
            contentHeight = max(canvasView.bounds.height, extendedHeight)
        } else {
            contentHeight = canvasView.bounds.height
        }

        canvasView.contentSize = CGSize(width: Const.Draw.maxCanvasWidth * canvasView.zoomScale, height: contentHeight)
    }
}

// MARK: - DrawDisplayLogic Extension

extension DrawViewController: DrawDisplayLogic {}

// MARK: - PKCanvasViewDelegate Extension

extension DrawViewController: PKCanvasViewDelegate {}

// MARK: - PKToolPickerObserver Extension

extension DrawViewController: PKToolPickerObserver {}
